package main.ui;

import main.models.Configuration;

/**
 * Define methods for element generation.
 *
 * @author ScrapsBits
 */
public abstract class ElementGenerator {

	/**
	 * Store a reference to the controller object.
	 */
	private final Controller controller;

	/**
	 * Create an instance of the element generator.
	 *
	 * @param configuration Collect the configuration and store it. It's data will be used to automatically fill in form data.
	 */
	protected ElementGenerator(final Controller controller) { this.controller = controller; }

	/**
	 * Generate a button with the given (unique) id and text.
	 *
	 * @param  id   The button's unique identifier.
	 * @param  text The text displayed on the button.
	 * @return      Returns the button generated by this method.
	 */
	protected abstract Object generateButton(final String id, final String text);

	/**
	 * Generate a checkbox with the given (unique) id and text.
	 *
	 * @param  id   The checkbox's unique identifier.
	 * @param  text The text displayed on the checkbox.
	 * @return      Returns the checkbox generated by this method.
	 */
	protected abstract Object generateCheckBox(final String id, final String text);

	/**
	 * Generate a checkbox with the given (unique) id and text. Define if it needs to be checked.
	 *
	 * @param  id      The checkbox's unique identifier.
	 * @param  text    The text displayed on the checkbox.
	 * @param  checked Define if the checkbox is checked.
	 * @return         Returns the checkbox generated by this method.
	 */
	protected abstract Object generateCheckBox(final String id, final String text, final boolean checked);

	/**
	 * Generate a label with the given (unique) id and text.
	 *
	 * @param  id   The label's unique identifier.
	 * @param  text The text displayed on the label.
	 * @return      Returns the label generated by this method.
	 */
	protected abstract Object generateLabel(final String id, final String text);

	/**
	 * Generate a menu with the given (unique) id and text.
	 *
	 * @param  id The menu's unique identifier.
	 * @return    Returns the menu generated by this method.
	 */
	protected abstract Object generateMenu(final String id);

	/**
	 * Generate a menu item with the given (unique) id and text.
	 *
	 * @param  id   The menu item's unique identifier.
	 * @param  text The text displayed on the menu item.
	 * @return      Returns the menu item generated by this method.
	 */
	protected abstract Object generateMenuItem(final String id, final String text);

	/**
	 * Generate a menu item with the given (unique) id and text. Define if the item should be accessible.
	 *
	 * @param  id      The menu item's unique identifier.
	 * @param  text    The text displayed on the menu item.
	 * @param  enabled Define if the menu item should be enabled.
	 * @return         Returns the menu item generated by this method.
	 */
	protected abstract Object generateMenuItem(final String id, final String text, final boolean enabled);

	/**
	 * Generate a textfield with the given (unique) id and text.
	 *
	 * @param  id         The textfield's unique identifier.
	 * @param  promptText The text displayed on the textfield when no input is given.
	 * @return            Returns the textfield generated by this method.
	 */
	protected abstract Object generateTextField(final String id, final String promptText);

	/**
	 * Generate a textfield with the given (unique) id and text.
	 *
	 * @param  id         The textfield's unique identifier.
	 * @param  promptText The text displayed on the textfield when no input is given.
	 * @param  text       The text displayed on the textfield.
	 * @return            Returns the textfield generated by this method.
	 */
	protected abstract Object generateTextField(final String id, final String promptText, final String text);

	/**
	 * Get the reference to the configuration object.
	 *
	 * @return Returns the configuration object.
	 */
	protected Configuration getConfig() { return this.controller.getConfig(); }

	/**
	 * Get the reference to the controller object.
	 *
	 * @return Returns the controller object.
	 */
	protected Controller getController() { return this.controller; }

	/**
	 * Inserts all elements to be displayed by the UI in the frame provided.
	 *
	 * @param frame The frame to populate with the elements.
	 */
	public abstract void populate(Object frame);
}
